
Temp and Humidity sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004450  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004620  08004620  00005620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004698  08004698  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  080046fc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080046fc  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a84e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183a  00000000  00000000  000108da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00012118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000774  00000000  00000000  00012a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021552  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d163  00000000  00000000  0003475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cacdb  00000000  00000000  000418c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c59c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d7c  00000000  00000000  0010c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0010f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004608 	.word	0x08004608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004608 	.word	0x08004608

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b96a 	b.w	8000c18 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	460c      	mov	r4, r1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d14e      	bne.n	8000a06 <__udivmoddi4+0xaa>
 8000968:	4694      	mov	ip, r2
 800096a:	458c      	cmp	ip, r1
 800096c:	4686      	mov	lr, r0
 800096e:	fab2 f282 	clz	r2, r2
 8000972:	d962      	bls.n	8000a3a <__udivmoddi4+0xde>
 8000974:	b14a      	cbz	r2, 800098a <__udivmoddi4+0x2e>
 8000976:	f1c2 0320 	rsb	r3, r2, #32
 800097a:	4091      	lsls	r1, r2
 800097c:	fa20 f303 	lsr.w	r3, r0, r3
 8000980:	fa0c fc02 	lsl.w	ip, ip, r2
 8000984:	4319      	orrs	r1, r3
 8000986:	fa00 fe02 	lsl.w	lr, r0, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f f68c 	uxth.w	r6, ip
 8000992:	fbb1 f4f7 	udiv	r4, r1, r7
 8000996:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099a:	fb07 1114 	mls	r1, r7, r4, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb04 f106 	mul.w	r1, r4, r6
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80009b2:	f080 8112 	bcs.w	8000bda <__udivmoddi4+0x27e>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 810f 	bls.w	8000bda <__udivmoddi4+0x27e>
 80009bc:	3c02      	subs	r4, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a59      	subs	r1, r3, r1
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ca:	fb07 1110 	mls	r1, r7, r0, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb00 f606 	mul.w	r6, r0, r6
 80009d6:	429e      	cmp	r6, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x94>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e2:	f080 80fc 	bcs.w	8000bde <__udivmoddi4+0x282>
 80009e6:	429e      	cmp	r6, r3
 80009e8:	f240 80f9 	bls.w	8000bde <__udivmoddi4+0x282>
 80009ec:	4463      	add	r3, ip
 80009ee:	3802      	subs	r0, #2
 80009f0:	1b9b      	subs	r3, r3, r6
 80009f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009f6:	2100      	movs	r1, #0
 80009f8:	b11d      	cbz	r5, 8000a02 <__udivmoddi4+0xa6>
 80009fa:	40d3      	lsrs	r3, r2
 80009fc:	2200      	movs	r2, #0
 80009fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d905      	bls.n	8000a16 <__udivmoddi4+0xba>
 8000a0a:	b10d      	cbz	r5, 8000a10 <__udivmoddi4+0xb4>
 8000a0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a10:	2100      	movs	r1, #0
 8000a12:	4608      	mov	r0, r1
 8000a14:	e7f5      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000a16:	fab3 f183 	clz	r1, r3
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d146      	bne.n	8000aac <__udivmoddi4+0x150>
 8000a1e:	42a3      	cmp	r3, r4
 8000a20:	d302      	bcc.n	8000a28 <__udivmoddi4+0xcc>
 8000a22:	4290      	cmp	r0, r2
 8000a24:	f0c0 80f0 	bcc.w	8000c08 <__udivmoddi4+0x2ac>
 8000a28:	1a86      	subs	r6, r0, r2
 8000a2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a2e:	2001      	movs	r0, #1
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d0e6      	beq.n	8000a02 <__udivmoddi4+0xa6>
 8000a34:	e9c5 6300 	strd	r6, r3, [r5]
 8000a38:	e7e3      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	f040 8090 	bne.w	8000b60 <__udivmoddi4+0x204>
 8000a40:	eba1 040c 	sub.w	r4, r1, ip
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa1f f78c 	uxth.w	r7, ip
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a56:	fb08 4416 	mls	r4, r8, r6, r4
 8000a5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5e:	fb07 f006 	mul.w	r0, r7, r6
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x11c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x11a>
 8000a70:	4298      	cmp	r0, r3
 8000a72:	f200 80cd 	bhi.w	8000c10 <__udivmoddi4+0x2b4>
 8000a76:	4626      	mov	r6, r4
 8000a78:	1a1c      	subs	r4, r3, r0
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a82:	fb08 4410 	mls	r4, r8, r0, r4
 8000a86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8a:	fb00 f707 	mul.w	r7, r0, r7
 8000a8e:	429f      	cmp	r7, r3
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x148>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9a:	d202      	bcs.n	8000aa2 <__udivmoddi4+0x146>
 8000a9c:	429f      	cmp	r7, r3
 8000a9e:	f200 80b0 	bhi.w	8000c02 <__udivmoddi4+0x2a6>
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	1bdb      	subs	r3, r3, r7
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	e7a5      	b.n	80009f8 <__udivmoddi4+0x9c>
 8000aac:	f1c1 0620 	rsb	r6, r1, #32
 8000ab0:	408b      	lsls	r3, r1
 8000ab2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000abc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ac0:	ea43 030c 	orr.w	r3, r3, ip
 8000ac4:	40f4      	lsrs	r4, r6
 8000ac6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aca:	0c38      	lsrs	r0, r7, #16
 8000acc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ad0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	fb00 441e 	mls	r4, r0, lr, r4
 8000adc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ae4:	45a1      	cmp	r9, r4
 8000ae6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aea:	d90a      	bls.n	8000b02 <__udivmoddi4+0x1a6>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000af2:	f080 8084 	bcs.w	8000bfe <__udivmoddi4+0x2a2>
 8000af6:	45a1      	cmp	r9, r4
 8000af8:	f240 8081 	bls.w	8000bfe <__udivmoddi4+0x2a2>
 8000afc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b00:	443c      	add	r4, r7
 8000b02:	eba4 0409 	sub.w	r4, r4, r9
 8000b06:	fa1f f983 	uxth.w	r9, r3
 8000b0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d907      	bls.n	8000b2e <__udivmoddi4+0x1d2>
 8000b1e:	193c      	adds	r4, r7, r4
 8000b20:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b24:	d267      	bcs.n	8000bf6 <__udivmoddi4+0x29a>
 8000b26:	45a4      	cmp	ip, r4
 8000b28:	d965      	bls.n	8000bf6 <__udivmoddi4+0x29a>
 8000b2a:	3b02      	subs	r3, #2
 8000b2c:	443c      	add	r4, r7
 8000b2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b32:	fba0 9302 	umull	r9, r3, r0, r2
 8000b36:	eba4 040c 	sub.w	r4, r4, ip
 8000b3a:	429c      	cmp	r4, r3
 8000b3c:	46ce      	mov	lr, r9
 8000b3e:	469c      	mov	ip, r3
 8000b40:	d351      	bcc.n	8000be6 <__udivmoddi4+0x28a>
 8000b42:	d04e      	beq.n	8000be2 <__udivmoddi4+0x286>
 8000b44:	b155      	cbz	r5, 8000b5c <__udivmoddi4+0x200>
 8000b46:	ebb8 030e 	subs.w	r3, r8, lr
 8000b4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b52:	40cb      	lsrs	r3, r1
 8000b54:	431e      	orrs	r6, r3
 8000b56:	40cc      	lsrs	r4, r1
 8000b58:	e9c5 6400 	strd	r6, r4, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e750      	b.n	8000a02 <__udivmoddi4+0xa6>
 8000b60:	f1c2 0320 	rsb	r3, r2, #32
 8000b64:	fa20 f103 	lsr.w	r1, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	430c      	orrs	r4, r1
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7c:	fa1f f78c 	uxth.w	r7, ip
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3110 	mls	r1, r8, r0, r3
 8000b88:	0c23      	lsrs	r3, r4, #16
 8000b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8e:	fb00 f107 	mul.w	r1, r0, r7
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x24c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b9e:	d22c      	bcs.n	8000bfa <__udivmoddi4+0x29e>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d92a      	bls.n	8000bfa <__udivmoddi4+0x29e>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bb0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb01 f307 	mul.w	r3, r1, r7
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x276>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bc8:	d213      	bcs.n	8000bf2 <__udivmoddi4+0x296>
 8000bca:	42a3      	cmp	r3, r4
 8000bcc:	d911      	bls.n	8000bf2 <__udivmoddi4+0x296>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4464      	add	r4, ip
 8000bd2:	1ae4      	subs	r4, r4, r3
 8000bd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bd8:	e739      	b.n	8000a4e <__udivmoddi4+0xf2>
 8000bda:	4604      	mov	r4, r0
 8000bdc:	e6f0      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bde:	4608      	mov	r0, r1
 8000be0:	e706      	b.n	80009f0 <__udivmoddi4+0x94>
 8000be2:	45c8      	cmp	r8, r9
 8000be4:	d2ae      	bcs.n	8000b44 <__udivmoddi4+0x1e8>
 8000be6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bee:	3801      	subs	r0, #1
 8000bf0:	e7a8      	b.n	8000b44 <__udivmoddi4+0x1e8>
 8000bf2:	4631      	mov	r1, r6
 8000bf4:	e7ed      	b.n	8000bd2 <__udivmoddi4+0x276>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	e799      	b.n	8000b2e <__udivmoddi4+0x1d2>
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	e7d4      	b.n	8000ba8 <__udivmoddi4+0x24c>
 8000bfe:	46d6      	mov	lr, sl
 8000c00:	e77f      	b.n	8000b02 <__udivmoddi4+0x1a6>
 8000c02:	4463      	add	r3, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	e74d      	b.n	8000aa4 <__udivmoddi4+0x148>
 8000c08:	4606      	mov	r6, r0
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e70f      	b.n	8000a30 <__udivmoddi4+0xd4>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	e730      	b.n	8000a78 <__udivmoddi4+0x11c>
 8000c16:	bf00      	nop

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fb39 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f8a3 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 f967 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2e:	f000 f93b 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c32:	f000 f90b 	bl	8000e4c <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
    {

      // Tell TMP102 that we want to read from the temperature register
      buf[0] = REG_TEMP;
 8000c36:	2300      	movs	r3, #0
 8000c38:	713b      	strb	r3, [r7, #4]
      ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c3a:	2390      	movs	r3, #144	@ 0x90
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	4841      	ldr	r0, [pc, #260]	@ (8000d50 <main+0x134>)
 8000c4a:	f000 ff93 	bl	8001b74 <HAL_I2C_Master_Transmit>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	757b      	strb	r3, [r7, #21]
      if ( ret != HAL_OK ) {
 8000c52:	7d7b      	ldrb	r3, [r7, #21]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d008      	beq.n	8000c6a <main+0x4e>
        strcpy((char*)buf, "Error Tx\r\n");
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <main+0x138>)
 8000c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5e:	c303      	stmia	r3!, {r0, r1}
 8000c60:	801a      	strh	r2, [r3, #0]
 8000c62:	3302      	adds	r3, #2
 8000c64:	0c12      	lsrs	r2, r2, #16
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e061      	b.n	8000d2e <main+0x112>
      } else {

        // Read 2 bytes from the temperature register
        ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c6a:	2390      	movs	r3, #144	@ 0x90
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	1d3a      	adds	r2, r7, #4
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2302      	movs	r3, #2
 8000c78:	4835      	ldr	r0, [pc, #212]	@ (8000d50 <main+0x134>)
 8000c7a:	f001 f879 	bl	8001d70 <HAL_I2C_Master_Receive>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	757b      	strb	r3, [r7, #21]
        if ( ret != HAL_OK ) {
 8000c82:	7d7b      	ldrb	r3, [r7, #21]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d008      	beq.n	8000c9a <main+0x7e>
          strcpy((char*)buf, "Error Rx\r\n");
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4a33      	ldr	r2, [pc, #204]	@ (8000d58 <main+0x13c>)
 8000c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c8e:	c303      	stmia	r3!, {r0, r1}
 8000c90:	801a      	strh	r2, [r3, #0]
 8000c92:	3302      	adds	r3, #2
 8000c94:	0c12      	lsrs	r2, r2, #16
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e049      	b.n	8000d2e <main+0x112>
        } else {

          //Combine the bytes
          val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000c9a:	793b      	ldrb	r3, [r7, #4]
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	797b      	ldrb	r3, [r7, #5]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	82fb      	strh	r3, [r7, #22]

          // Convert to 2's complement, since temperature can be negative
          if ( val > 0x7FF ) {
 8000cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cb4:	db05      	blt.n	8000cc2 <main+0xa6>
            val |= 0xF000;
 8000cb6:	8afb      	ldrh	r3, [r7, #22]
 8000cb8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000cbc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000cc0:	82fb      	strh	r3, [r7, #22]
          }

          // Convert to float temperature value (Celsius)
          temp_c = val * 0.0625;
 8000cc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fd76 	bl	80007b8 <__aeabi_i2d>
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <main+0x140>)
 8000cd2:	f7ff faf5 	bl	80002c0 <__aeabi_dmul>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff fdd5 	bl	800088c <__aeabi_d2f>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	613b      	str	r3, [r7, #16]

          // Convert temperature to decimal format
          temp_c *= 100;
 8000ce6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000d60 <main+0x144>
 8000cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf2:	edc7 7a04 	vstr	s15, [r7, #16]
          sprintf((char*)buf,
                "%u.%u C\r\n",
                ((unsigned int)temp_c / 100),
 8000cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cfe:	ee17 2a90 	vmov	r2, s15
          sprintf((char*)buf,
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <main+0x148>)
 8000d04:	fba3 2302 	umull	r2, r3, r3, r2
 8000d08:	095a      	lsrs	r2, r3, #5
                ((unsigned int)temp_c % 100));
 8000d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d12:	ee17 1a90 	vmov	r1, s15
          sprintf((char*)buf,
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <main+0x148>)
 8000d18:	fba3 0301 	umull	r0, r3, r3, r1
 8000d1c:	095b      	lsrs	r3, r3, #5
 8000d1e:	2064      	movs	r0, #100	@ 0x64
 8000d20:	fb00 f303 	mul.w	r3, r0, r3
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	1d38      	adds	r0, r7, #4
 8000d28:	490f      	ldr	r1, [pc, #60]	@ (8000d68 <main+0x14c>)
 8000d2a:	f002 ffcd 	bl	8003cc8 <siprintf>
        }
      }

      // Send out buffer (temperature or error message)
      HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fa6d 	bl	8000210 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	1d39      	adds	r1, r7, #4
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <main+0x150>)
 8000d42:	f002 fc05 	bl	8003550 <HAL_UART_Transmit>

      // Wait
      HAL_Delay(500);
 8000d46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d4a:	f000 fb17 	bl	800137c <HAL_Delay>
      buf[0] = REG_TEMP;
 8000d4e:	e772      	b.n	8000c36 <main+0x1a>
 8000d50:	20000078 	.word	0x20000078
 8000d54:	08004620 	.word	0x08004620
 8000d58:	0800462c 	.word	0x0800462c
 8000d5c:	3fb00000 	.word	0x3fb00000
 8000d60:	42c80000 	.word	0x42c80000
 8000d64:	51eb851f 	.word	0x51eb851f
 8000d68:	08004638 	.word	0x08004638
 8000d6c:	200000cc 	.word	0x200000cc

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	@ 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2234      	movs	r2, #52	@ 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 ffc2 	bl	8003d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <SystemClock_Config+0xd4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9c:	4a29      	ldr	r2, [pc, #164]	@ (8000e44 <SystemClock_Config+0xd4>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <SystemClock_Config+0xd4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <SystemClock_Config+0xd8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dbc:	4a22      	ldr	r2, [pc, #136]	@ (8000e48 <SystemClock_Config+0xd8>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <SystemClock_Config+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000de4:	2310      	movs	r3, #16
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dee:	2304      	movs	r3, #4
 8000df0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f8b8 	bl	8002f74 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e0a:	f000 f8e5 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fd58 	bl	80028e0 <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e36:	f000 f8cf 	bl	8000fd8 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3750      	adds	r7, #80	@ 0x50
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <MX_I2C1_Init+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <MX_I2C1_Init+0x58>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <MX_I2C1_Init+0x50>)
 8000e8a:	f000 fd2f 	bl	80018ec <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 f8a0 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000078 	.word	0x20000078
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	000186a0 	.word	0x000186a0

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f002 fae6 	bl	80034b0 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f875 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000cc 	.word	0x200000cc
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_GPIO_Init+0xd0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	4812      	ldr	r0, [pc, #72]	@ (8000fd0 <MX_GPIO_Init+0xd4>)
 8000f88:	f000 fc96 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <MX_GPIO_Init+0xd8>)
 8000fa4:	f000 faf4 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <MX_GPIO_Init+0xd4>)
 8000fc0:	f000 fae6 	bl	8001590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fa80 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_I2C_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12c      	bne.n	80010b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001072:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001078:	2312      	movs	r3, #18
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001084:	2304      	movs	r3, #4
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <HAL_I2C_MspInit+0x8c>)
 8001090:	f000 fa7e 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 800109e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_I2C_MspInit+0x88>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	@ 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <HAL_UART_MspInit+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12b      	bne.n	800113e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_UART_MspInit+0x88>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a17      	ldr	r2, [pc, #92]	@ (800114c <HAL_UART_MspInit+0x88>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0x88>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_UART_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <HAL_UART_MspInit+0x88>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800111e:	230c      	movs	r3, #12
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <HAL_UART_MspInit+0x8c>)
 800113a:	f000 fa29 	bl	8001590 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <NMI_Handler+0x4>

0800115c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <MemManage_Handler+0x4>

0800116c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <UsageFault_Handler+0x4>

0800117c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f000 f8c7 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f002 fd98 	bl	8003d18 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20020000 	.word	0x20020000
 8001214:	00000400 	.word	0x00000400
 8001218:	20000114 	.word	0x20000114
 800121c:	20000268 	.word	0x20000268

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800127c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001248:	f7ff ffea 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124e:	490d      	ldr	r1, [pc, #52]	@ (8001284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001264:	4c0a      	ldr	r4, [pc, #40]	@ (8001290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001272:	f002 fd57 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fcd1 	bl	8000c1c <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001288:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 800128c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001290:	20000264 	.word	0x20000264

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	@ (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f931 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fe8a 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f93b 	bl	8001576 <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f911 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	20000118 	.word	0x20000118

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000118 	.word	0x20000118

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff47 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff5c 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff8e 	bl	800147c <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffb0 	bl	80014e4 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e165      	b.n	8001878 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8154 	bne.w	8001872 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d005      	beq.n	80015e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d130      	bne.n	8001644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0201 	and.w	r2, r3, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b03      	cmp	r3, #3
 800164e:	d017      	beq.n	8001680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d123      	bne.n	80016d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80ae 	beq.w	8001872 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b5d      	ldr	r3, [pc, #372]	@ (8001890 <HAL_GPIO_Init+0x300>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	4a5c      	ldr	r2, [pc, #368]	@ (8001890 <HAL_GPIO_Init+0x300>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001724:	6453      	str	r3, [r2, #68]	@ 0x44
 8001726:	4b5a      	ldr	r3, [pc, #360]	@ (8001890 <HAL_GPIO_Init+0x300>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001732:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <HAL_GPIO_Init+0x304>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	@ (8001898 <HAL_GPIO_Init+0x308>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d025      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <HAL_GPIO_Init+0x30c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01f      	beq.n	80017a6 <HAL_GPIO_Init+0x216>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x310>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x212>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	@ (80018a4 <HAL_GPIO_Init+0x314>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	@ (80018a8 <HAL_GPIO_Init+0x318>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x20a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <HAL_GPIO_Init+0x31c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x206>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a49      	ldr	r2, [pc, #292]	@ (80018b0 <HAL_GPIO_Init+0x320>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x202>
 800178e:	2306      	movs	r3, #6
 8001790:	e00c      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 8001792:	2307      	movs	r3, #7
 8001794:	e00a      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 8001796:	2305      	movs	r3, #5
 8001798:	e008      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 800179a:	2304      	movs	r3, #4
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 800179e:	2303      	movs	r3, #3
 80017a0:	e004      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x21c>
 80017aa:	2300      	movs	r3, #0
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f002 0203 	and.w	r2, r2, #3
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4093      	lsls	r3, r2
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017bc:	4935      	ldr	r1, [pc, #212]	@ (8001894 <HAL_GPIO_Init+0x304>)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ca:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ee:	4a31      	ldr	r2, [pc, #196]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f4:	4b2f      	ldr	r3, [pc, #188]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001818:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181e:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001842:	4a1c      	ldr	r2, [pc, #112]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001848:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186c:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	f67f ae96 	bls.w	80015ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3724      	adds	r7, #36	@ 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40013800 	.word	0x40013800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020c00 	.word	0x40020c00
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40021400 	.word	0x40021400
 80018b0:	40021800 	.word	0x40021800
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e12b      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fb8e 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	@ 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800193e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800194e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001950:	f001 f8b8 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a81      	ldr	r2, [pc, #516]	@ (8001b60 <HAL_I2C_Init+0x274>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d807      	bhi.n	8001970 <HAL_I2C_Init+0x84>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a80      	ldr	r2, [pc, #512]	@ (8001b64 <HAL_I2C_Init+0x278>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e006      	b.n	800197e <HAL_I2C_Init+0x92>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a7d      	ldr	r2, [pc, #500]	@ (8001b68 <HAL_I2C_Init+0x27c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	bf94      	ite	ls
 8001978:	2301      	movls	r3, #1
 800197a:	2300      	movhi	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0e7      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	@ (8001b6c <HAL_I2C_Init+0x280>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b60 <HAL_I2C_Init+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d802      	bhi.n	80019c0 <HAL_I2C_Init+0xd4>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	e009      	b.n	80019d4 <HAL_I2C_Init+0xe8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a69      	ldr	r2, [pc, #420]	@ (8001b70 <HAL_I2C_Init+0x284>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	3301      	adds	r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	495c      	ldr	r1, [pc, #368]	@ (8001b60 <HAL_I2C_Init+0x274>)
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d819      	bhi.n	8001a28 <HAL_I2C_Init+0x13c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <HAL_I2C_Init+0x138>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e59      	subs	r1, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	e051      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e04f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_I2C_Init+0x168>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Init+0x18e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x196>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e022      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_I2C_Init+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e58      	subs	r0, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001af6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6911      	ldr	r1, [r2, #16]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	001e847f 	.word	0x001e847f
 8001b68:	003d08ff 	.word	0x003d08ff
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	10624dd3 	.word	0x10624dd3

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fbec 	bl	8001364 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	@ (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fc64 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	@ 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	@ (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 face 	bl	80021d4 <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fd22 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fd19 	bl	8002738 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
 8001d80:	4613      	mov	r3, r2
 8001d82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff faee 	bl	8001364 <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	f040 8217 	bne.w	80021c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2319      	movs	r3, #25
 8001d9e:	2201      	movs	r2, #1
 8001da0:	497c      	ldr	r1, [pc, #496]	@ (8001f94 <HAL_I2C_Master_Receive+0x224>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fb66 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	e20a      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2C_Master_Receive+0x50>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e203      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d007      	beq.n	8001de6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2222      	movs	r2, #34	@ 0x22
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2210      	movs	r2, #16
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	893a      	ldrh	r2, [r7, #8]
 8001e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a5c      	ldr	r2, [pc, #368]	@ (8001f98 <HAL_I2C_Master_Receive+0x228>)
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e28:	8979      	ldrh	r1, [r7, #10]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa52 	bl	80022d8 <I2C_MasterRequestRead>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1c4      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d113      	bne.n	8001e6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e198      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d11b      	bne.n	8001eae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e178      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d11b      	bne.n	8001eee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	e158      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f14:	e144      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	f200 80f1 	bhi.w	8002102 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d123      	bne.n	8001f70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fc4b 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e145      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f6e:	e117      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d14e      	bne.n	8002016 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4906      	ldr	r1, [pc, #24]	@ (8001f9c <HAL_I2C_Master_Receive+0x22c>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa76 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e11a      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
 8001f92:	bf00      	nop
 8001f94:	00100002 	.word	0x00100002
 8001f98:	ffff0000 	.word	0xffff0000
 8001f9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002014:	e0c4      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201c:	2200      	movs	r2, #0
 800201e:	496c      	ldr	r1, [pc, #432]	@ (80021d0 <HAL_I2C_Master_Receive+0x460>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa27 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0cb      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800203e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	2200      	movs	r2, #0
 800207a:	4955      	ldr	r1, [pc, #340]	@ (80021d0 <HAL_I2C_Master_Receive+0x460>)
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f9f9 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e09d      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002100:	e04e      	b.n	80021a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fb5e 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e058      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d124      	bne.n	80021a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800216c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f aeb6 	bne.w	8001f16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3728      	adds	r7, #40	@ 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	00010004 	.word	0x00010004

080021d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	460b      	mov	r3, r1
 80021e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d006      	beq.n	80021fe <I2C_MasterRequestWrite+0x2a>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d003      	beq.n	80021fe <I2C_MasterRequestWrite+0x2a>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021fc:	d108      	bne.n	8002210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e00b      	b.n	8002228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	2b12      	cmp	r3, #18
 8002216:	d107      	bne.n	8002228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f91d 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800224e:	d103      	bne.n	8002258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e035      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002264:	d108      	bne.n	8002278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	e01b      	b.n	80022b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002278:	897b      	ldrh	r3, [r7, #10]
 800227a:	11db      	asrs	r3, r3, #7
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 0306 	and.w	r3, r3, #6
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f063 030f 	orn	r3, r3, #15
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <I2C_MasterRequestWrite+0xfc>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f966 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e010      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022a6:	897b      	ldrh	r3, [r7, #10]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4907      	ldr	r1, [pc, #28]	@ (80022d4 <I2C_MasterRequestWrite+0x100>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f956 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	00010008 	.word	0x00010008
 80022d4:	00010002 	.word	0x00010002

080022d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	460b      	mov	r3, r1
 80022e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d006      	beq.n	8002312 <I2C_MasterRequestRead+0x3a>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d003      	beq.n	8002312 <I2C_MasterRequestRead+0x3a>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002310:	d108      	bne.n	8002324 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e00b      	b.n	800233c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	2b11      	cmp	r3, #17
 800232a:	d107      	bne.n	800233c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800233a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f893 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002362:	d103      	bne.n	800236c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e079      	b.n	8002464 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002378:	d108      	bne.n	800238c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e05f      	b.n	800244c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	11db      	asrs	r3, r3, #7
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f003 0306 	and.w	r3, r3, #6
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f063 030f 	orn	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4930      	ldr	r1, [pc, #192]	@ (800246c <I2C_MasterRequestRead+0x194>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f8dc 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e054      	b.n	8002464 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ba:	897b      	ldrh	r3, [r7, #10]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4929      	ldr	r1, [pc, #164]	@ (8002470 <I2C_MasterRequestRead+0x198>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f8cc 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e044      	b.n	8002464 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f831 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002426:	d103      	bne.n	8002430 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e017      	b.n	8002464 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	11db      	asrs	r3, r3, #7
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f063 030e 	orn	r3, r3, #14
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <I2C_MasterRequestRead+0x198>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f888 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	00010008 	.word	0x00010008
 8002470:	00010002 	.word	0x00010002

08002474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002484:	e048      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d044      	beq.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe ff69 	bl	8001364 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d139      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	0c1b      	lsrs	r3, r3, #16
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10d      	bne.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	e00c      	b.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	43da      	mvns	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d116      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e023      	b.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10d      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	e00c      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	429a      	cmp	r2, r3
 800255c:	d093      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002576:	e071      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d123      	bne.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f043 0204 	orr.w	r2, r3, #4
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e067      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d041      	beq.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d8:	f7fe fec4 	bl	8001364 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d136      	bne.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e00b      	b.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	43da      	mvns	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e021      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10c      	bne.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e00b      	b.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af6d 	bne.w	8002578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8e3 	bl	8002882 <I2C_IsAcknowledgeFailed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e034      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d028      	beq.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fe49 	bl	8001364 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11d      	bne.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b80      	cmp	r3, #128	@ 0x80
 80026f0:	d016      	beq.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b80      	cmp	r3, #128	@ 0x80
 800272c:	d1c3      	bne.n	80026b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002744:	e034      	b.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f89b 	bl	8002882 <I2C_IsAcknowledgeFailed>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d028      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fe01 	bl	8001364 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11d      	bne.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d016      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d1c3      	bne.n	8002746 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d4:	e049      	b.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d119      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e030      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe fda4 	bl	8001364 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002838:	2b40      	cmp	r3, #64	@ 0x40
 800283a:	d016      	beq.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d1ae      	bne.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	d11b      	bne.n	80028d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0cc      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f4:	4b68      	ldr	r3, [pc, #416]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d90c      	bls.n	800291c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b63      	ldr	r3, [pc, #396]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b8      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002934:	4b59      	ldr	r3, [pc, #356]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a58      	ldr	r2, [pc, #352]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800293e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800294c:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a52      	ldr	r2, [pc, #328]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	494d      	ldr	r1, [pc, #308]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d044      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b47      	ldr	r3, [pc, #284]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d119      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e07f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d003      	beq.n	800299e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299a:	2b03      	cmp	r3, #3
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e067      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b37      	ldr	r3, [pc, #220]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4934      	ldr	r1, [pc, #208]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7fe fcc8 	bl	8001364 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fe fcc4 	bl	8001364 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b2b      	ldr	r3, [pc, #172]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b25      	ldr	r3, [pc, #148]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d20c      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b20      	ldr	r3, [pc, #128]	@ (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e032      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4916      	ldr	r1, [pc, #88]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	490e      	ldr	r1, [pc, #56]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a66:	f000 f855 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	490a      	ldr	r1, [pc, #40]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	5ccb      	ldrb	r3, [r1, r3]
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	4a09      	ldr	r2, [pc, #36]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a82:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fc28 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08004644 	.word	0x08004644
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08004654 	.word	0x08004654

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff ffdc 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	@ (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	08004654 	.word	0x08004654

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b0ae      	sub	sp, #184	@ 0xb8
 8002b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3a:	4bcb      	ldr	r3, [pc, #812]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	f200 8206 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x440>
 8002b48:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002f55 	.word	0x08002f55
 8002b58:	08002f55 	.word	0x08002f55
 8002b5c:	08002f55 	.word	0x08002f55
 8002b60:	08002b8d 	.word	0x08002b8d
 8002b64:	08002f55 	.word	0x08002f55
 8002b68:	08002f55 	.word	0x08002f55
 8002b6c:	08002f55 	.word	0x08002f55
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002f55 	.word	0x08002f55
 8002b78:	08002f55 	.word	0x08002f55
 8002b7c:	08002f55 	.word	0x08002f55
 8002b80:	08002d85 	.word	0x08002d85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4bb9      	ldr	r3, [pc, #740]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b8a:	e1e7      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8c:	4bb8      	ldr	r3, [pc, #736]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b92:	e1e3      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4bb4      	ldr	r3, [pc, #720]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba0:	4bb1      	ldr	r3, [pc, #708]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d071      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bac:	4bae      	ldr	r3, [pc, #696]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bb8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be4:	0150      	lsls	r0, r2, #5
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4621      	mov	r1, r4
 8002bec:	1a51      	subs	r1, r2, r1
 8002bee:	6439      	str	r1, [r7, #64]	@ 0x40
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c04:	4649      	mov	r1, r9
 8002c06:	018b      	lsls	r3, r1, #6
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0e:	4641      	mov	r1, r8
 8002c10:	018a      	lsls	r2, r1, #6
 8002c12:	4641      	mov	r1, r8
 8002c14:	1a51      	subs	r1, r2, r1
 8002c16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c18:	4649      	mov	r1, r9
 8002c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	00cb      	lsls	r3, r1, #3
 8002c30:	4641      	mov	r1, r8
 8002c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c36:	4641      	mov	r1, r8
 8002c38:	00ca      	lsls	r2, r1, #3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4622      	mov	r2, r4
 8002c42:	189b      	adds	r3, r3, r2
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c46:	462b      	mov	r3, r5
 8002c48:	460a      	mov	r2, r1
 8002c4a:	eb42 0303 	adc.w	r3, r2, r3
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	024b      	lsls	r3, r1, #9
 8002c60:	4621      	mov	r1, r4
 8002c62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c66:	4621      	mov	r1, r4
 8002c68:	024a      	lsls	r2, r1, #9
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c80:	f7fd fe54 	bl	800092c <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8e:	e067      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c90:	4b75      	ldr	r3, [pc, #468]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002caa:	2300      	movs	r3, #0
 8002cac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	0159      	lsls	r1, r3, #5
 8002cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc4:	0150      	lsls	r0, r2, #5
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4621      	mov	r1, r4
 8002ccc:	1a51      	subs	r1, r2, r1
 8002cce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	018b      	lsls	r3, r1, #6
 8002ce8:	4641      	mov	r1, r8
 8002cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cee:	4641      	mov	r1, r8
 8002cf0:	018a      	lsls	r2, r1, #6
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d12:	4692      	mov	sl, r2
 8002d14:	469b      	mov	fp, r3
 8002d16:	4623      	mov	r3, r4
 8002d18:	eb1a 0303 	adds.w	r3, sl, r3
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	462b      	mov	r3, r5
 8002d20:	eb4b 0303 	adc.w	r3, fp, r3
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d32:	4629      	mov	r1, r5
 8002d34:	028b      	lsls	r3, r1, #10
 8002d36:	4621      	mov	r1, r4
 8002d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	028a      	lsls	r2, r1, #10
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d48:	2200      	movs	r2, #0
 8002d4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d52:	f7fd fdeb 	bl	800092c <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d60:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d82:	e0eb      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d90:	4b35      	ldr	r3, [pc, #212]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d06b      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9c:	4b32      	ldr	r3, [pc, #200]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	2200      	movs	r2, #0
 8002da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002da8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8002db0:	2300      	movs	r3, #0
 8002db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002db4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002db8:	4622      	mov	r2, r4
 8002dba:	462b      	mov	r3, r5
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0159      	lsls	r1, r3, #5
 8002dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dca:	0150      	lsls	r0, r2, #5
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	1a51      	subs	r1, r2, r1
 8002dd4:	61b9      	str	r1, [r7, #24]
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dea:	4659      	mov	r1, fp
 8002dec:	018b      	lsls	r3, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df4:	4651      	mov	r1, sl
 8002df6:	018a      	lsls	r2, r1, #6
 8002df8:	4651      	mov	r1, sl
 8002dfa:	ebb2 0801 	subs.w	r8, r2, r1
 8002dfe:	4659      	mov	r1, fp
 8002e00:	eb63 0901 	sbc.w	r9, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e18:	4690      	mov	r8, r2
 8002e1a:	4699      	mov	r9, r3
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	eb18 0303 	adds.w	r3, r8, r3
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	462b      	mov	r3, r5
 8002e26:	eb49 0303 	adc.w	r3, r9, r3
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e38:	4629      	mov	r1, r5
 8002e3a:	024b      	lsls	r3, r1, #9
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e42:	4621      	mov	r1, r4
 8002e44:	024a      	lsls	r2, r1, #9
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4e:	2200      	movs	r2, #0
 8002e50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e58:	f7fd fd68 	bl	800092c <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e66:	e065      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x420>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e74:	4b3d      	ldr	r3, [pc, #244]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	4611      	mov	r1, r2
 8002e80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e84:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e86:	2300      	movs	r3, #0
 8002e88:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e8e:	4642      	mov	r2, r8
 8002e90:	464b      	mov	r3, r9
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	0159      	lsls	r1, r3, #5
 8002e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea0:	0150      	lsls	r0, r2, #5
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	1a51      	subs	r1, r2, r1
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	4649      	mov	r1, r9
 8002eae:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eca:	4651      	mov	r1, sl
 8002ecc:	018a      	lsls	r2, r1, #6
 8002ece:	4651      	mov	r1, sl
 8002ed0:	1a54      	subs	r4, r2, r1
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	00eb      	lsls	r3, r5, #3
 8002ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee6:	00e2      	lsls	r2, r4, #3
 8002ee8:	4614      	mov	r4, r2
 8002eea:	461d      	mov	r5, r3
 8002eec:	4643      	mov	r3, r8
 8002eee:	18e3      	adds	r3, r4, r3
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	eb45 0303 	adc.w	r3, r5, r3
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f06:	4629      	mov	r1, r5
 8002f08:	028b      	lsls	r3, r1, #10
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f10:	4621      	mov	r1, r4
 8002f12:	028a      	lsls	r2, r1, #10
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f26:	f7fd fd01 	bl	800092c <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4613      	mov	r3, r2
 8002f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f34:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0f1b      	lsrs	r3, r3, #28
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f52:	e003      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	37b8      	adds	r7, #184	@ 0xb8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	00f42400 	.word	0x00f42400

08002f74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e28d      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8083 	beq.w	800309a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f94:	4b94      	ldr	r3, [pc, #592]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d019      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fa0:	4b91      	ldr	r3, [pc, #580]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fac:	4b8e      	ldr	r3, [pc, #568]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b8b      	ldr	r3, [pc, #556]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d112      	bne.n	8002fec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc6:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	4b84      	ldr	r3, [pc, #528]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05b      	beq.n	8003098 <HAL_RCC_OscConfig+0x124>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d157      	bne.n	8003098 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e25a      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x90>
 8002ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7b      	ldr	r2, [pc, #492]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01d      	b.n	8003040 <HAL_RCC_OscConfig+0xcc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0xb4>
 800300e:	4b76      	ldr	r3, [pc, #472]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a75      	ldr	r2, [pc, #468]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b73      	ldr	r3, [pc, #460]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a72      	ldr	r2, [pc, #456]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xcc>
 8003028:	4b6f      	ldr	r3, [pc, #444]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6e      	ldr	r2, [pc, #440]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b6c      	ldr	r3, [pc, #432]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6b      	ldr	r2, [pc, #428]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe f98c 	bl	8001364 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe f988 	bl	8001364 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e21f      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xdc>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f978 	bl	8001364 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe f974 	bl	8001364 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e20b      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	4b57      	ldr	r3, [pc, #348]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x104>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06f      	beq.n	8003186 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030a6:	4b50      	ldr	r3, [pc, #320]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d017      	beq.n	80030e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030b2:	4b4d      	ldr	r3, [pc, #308]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030be:	4b4a      	ldr	r3, [pc, #296]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ca:	4b47      	ldr	r3, [pc, #284]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d11c      	bne.n	8003110 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b44      	ldr	r3, [pc, #272]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	4b41      	ldr	r3, [pc, #260]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x186>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1d3      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b3b      	ldr	r3, [pc, #236]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4937      	ldr	r1, [pc, #220]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	e03a      	b.n	8003186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <HAL_RCC_OscConfig+0x278>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fe f921 	bl	8001364 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003126:	f7fe f91d 	bl	8001364 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e1b4      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	4b2b      	ldr	r3, [pc, #172]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	4b28      	ldr	r3, [pc, #160]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4925      	ldr	r1, [pc, #148]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	e015      	b.n	8003186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315a:	4b24      	ldr	r3, [pc, #144]	@ (80031ec <HAL_RCC_OscConfig+0x278>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f900 	bl	8001364 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003168:	f7fe f8fc 	bl	8001364 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e193      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d036      	beq.n	8003200 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe f8e0 	bl	8001364 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe f8dc 	bl	8001364 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e173      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80031bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x234>
 80031c6:	e01b      	b.n	8003200 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe f8c9 	bl	8001364 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	e00e      	b.n	80031f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fe f8c5 	bl	8001364 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d907      	bls.n	80031f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e15c      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
 80031e8:	40023800 	.word	0x40023800
 80031ec:	42470000 	.word	0x42470000
 80031f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ea      	bne.n	80031d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8097 	beq.w	800333c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003212:	4b83      	ldr	r3, [pc, #524]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	4b7f      	ldr	r3, [pc, #508]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	4a7e      	ldr	r2, [pc, #504]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322c:	6413      	str	r3, [r2, #64]	@ 0x40
 800322e:	4b7c      	ldr	r3, [pc, #496]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b79      	ldr	r3, [pc, #484]	@ (8003424 <HAL_RCC_OscConfig+0x4b0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d118      	bne.n	800327c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324a:	4b76      	ldr	r3, [pc, #472]	@ (8003424 <HAL_RCC_OscConfig+0x4b0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a75      	ldr	r2, [pc, #468]	@ (8003424 <HAL_RCC_OscConfig+0x4b0>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003256:	f7fe f885 	bl	8001364 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325e:	f7fe f881 	bl	8001364 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e118      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	4b6c      	ldr	r3, [pc, #432]	@ (8003424 <HAL_RCC_OscConfig+0x4b0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x31e>
 8003284:	4b66      	ldr	r3, [pc, #408]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003288:	4a65      	ldr	r2, [pc, #404]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003290:	e01c      	b.n	80032cc <HAL_RCC_OscConfig+0x358>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x340>
 800329a:	4b61      	ldr	r3, [pc, #388]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	4a60      	ldr	r2, [pc, #384]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x358>
 80032b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	4a59      	ldr	r2, [pc, #356]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c0:	4b57      	ldr	r3, [pc, #348]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	4a56      	ldr	r2, [pc, #344]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032c6:	f023 0304 	bic.w	r3, r3, #4
 80032ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe f846 	bl	8001364 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe f842 	bl	8001364 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e0d7      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0ee      	beq.n	80032dc <HAL_RCC_OscConfig+0x368>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe f830 	bl	8001364 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe f82c 	bl	8001364 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0c1      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331e:	4b40      	ldr	r3, [pc, #256]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ee      	bne.n	8003308 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003330:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	4a3a      	ldr	r2, [pc, #232]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80ad 	beq.w	80034a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003346:	4b36      	ldr	r3, [pc, #216]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b08      	cmp	r3, #8
 8003350:	d060      	beq.n	8003414 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d145      	bne.n	80033e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b33      	ldr	r3, [pc, #204]	@ (8003428 <HAL_RCC_OscConfig+0x4b4>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe f800 	bl	8001364 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fd fffc 	bl	8001364 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e093      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b29      	ldr	r3, [pc, #164]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	491b      	ldr	r1, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_RCC_OscConfig+0x4b4>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd ffd1 	bl	8001364 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd ffcd 	bl	8001364 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e064      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x452>
 80033e4:	e05c      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_RCC_OscConfig+0x4b4>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd ffba 	bl	8001364 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd ffb6 	bl	8001364 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e04d      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x480>
 8003412:	e045      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e040      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
 8003428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800342c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <HAL_RCC_OscConfig+0x538>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d030      	beq.n	800349c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d129      	bne.n	800349c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d122      	bne.n	800349c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	3b01      	subs	r3, #1
 8003476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d10f      	bne.n	800349c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e042      	b.n	8003548 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fdf4 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f973 	bl	80037e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d175      	bne.n	800365c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x2c>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e06e      	b.n	800365e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	@ 0x21
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fd fee9 	bl	8001364 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a8:	d108      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e003      	b.n	80035c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c4:	e02e      	b.n	8003624 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f848 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03a      	b.n	800365e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3302      	adds	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e007      	b.n	8003616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1cb      	bne.n	80035c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	2140      	movs	r1, #64	@ 0x40
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f814 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e006      	b.n	800365e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	e03b      	b.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d037      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003680:	f7fd fe70 	bl	8001364 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d302      	bcc.n	8003696 <UART_WaitOnFlagUntilTimeout+0x30>
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03a      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b80      	cmp	r3, #128	@ 0x80
 80036ac:	d020      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d01d      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d116      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f81d 	bl	8003718 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2208      	movs	r2, #8
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00f      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d0b4      	beq.n	8003678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b095      	sub	sp, #84	@ 0x54
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003740:	643a      	str	r2, [r7, #64]	@ 0x40
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	61fb      	str	r3, [r7, #28]
   return(result);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3314      	adds	r3, #20
 8003772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003774:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800377a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d119      	bne.n	80037c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b0:	61ba      	str	r2, [r7, #24]
 80037b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	613b      	str	r3, [r7, #16]
   return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037d2:	bf00      	nop
 80037d4:	3754      	adds	r7, #84	@ 0x54
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b0c0      	sub	sp, #256	@ 0x100
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	ea40 0301 	orr.w	r3, r0, r1
 8003866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <UART_SetConfig+0x2cc>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d005      	beq.n	8003880 <UART_SetConfig+0xa0>
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab0 <UART_SetConfig+0x2d0>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7ff f934 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8003884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003888:	e003      	b.n	8003892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7ff f91b 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 800388e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389c:	f040 810c 	bne.w	8003ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	1891      	adds	r1, r2, r2
 80038b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ba:	415b      	adcs	r3, r3
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038c2:	4621      	mov	r1, r4
 80038c4:	eb12 0801 	adds.w	r8, r2, r1
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb43 0901 	adc.w	r9, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb18 0303 	adds.w	r3, r8, r3
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f0:	462b      	mov	r3, r5
 80038f2:	eb49 0303 	adc.w	r3, r9, r3
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800390a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800390e:	460b      	mov	r3, r1
 8003910:	18db      	adds	r3, r3, r3
 8003912:	653b      	str	r3, [r7, #80]	@ 0x50
 8003914:	4613      	mov	r3, r2
 8003916:	eb42 0303 	adc.w	r3, r2, r3
 800391a:	657b      	str	r3, [r7, #84]	@ 0x54
 800391c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003924:	f7fd f802 	bl	800092c <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b61      	ldr	r3, [pc, #388]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011c      	lsls	r4, r3, #4
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003950:	415b      	adcs	r3, r3
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003958:	4641      	mov	r1, r8
 800395a:	eb12 0a01 	adds.w	sl, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0b01 	adc.w	fp, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003978:	4692      	mov	sl, r2
 800397a:	469b      	mov	fp, r3
 800397c:	4643      	mov	r3, r8
 800397e:	eb1a 0303 	adds.w	r3, sl, r3
 8003982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003986:	464b      	mov	r3, r9
 8003988:	eb4b 0303 	adc.w	r3, fp, r3
 800398c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800399c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ba:	f7fc ffb7 	bl	800092c <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	@ 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1acb      	subs	r3, r1, r3
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 2302 	umull	r2, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039e8:	441c      	add	r4, r3
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a04:	415b      	adcs	r3, r3
 8003a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	464b      	mov	r3, r9
 8003a42:	460a      	mov	r2, r1
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a76:	f7fc ff59 	bl	800092c <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	@ 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	@ 0x32
 8003a92:	4a08      	ldr	r2, [pc, #32]	@ (8003ab4 <UART_SetConfig+0x2d4>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4422      	add	r2, r4
 8003aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa8:	e106      	b.n	8003cb8 <UART_SetConfig+0x4d8>
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aca:	4642      	mov	r2, r8
 8003acc:	464b      	mov	r3, r9
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	6239      	str	r1, [r7, #32]
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ada:	4641      	mov	r1, r8
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0501 	adc.w	r5, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b00:	464b      	mov	r3, r9
 8003b02:	eb45 0303 	adc.w	r3, r5, r3
 8003b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b26:	4629      	mov	r1, r5
 8003b28:	008b      	lsls	r3, r1, #2
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b30:	4621      	mov	r1, r4
 8003b32:	008a      	lsls	r2, r1, #2
 8003b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b38:	f7fc fef8 	bl	800092c <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b60      	ldr	r3, [pc, #384]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	61b9      	str	r1, [r7, #24]
 8003b64:	415b      	adcs	r3, r3
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6139      	str	r1, [r7, #16]
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4641      	mov	r1, r8
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bd6:	f7fc fea9 	bl	800092c <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b38      	ldr	r3, [pc, #224]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	@ 0x32
 8003bf4:	4a33      	ldr	r2, [pc, #204]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c52:	464b      	mov	r3, r9
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c74:	4649      	mov	r1, r9
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7e:	4641      	mov	r1, r8
 8003c80:	008a      	lsls	r2, r1, #2
 8003c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c86:	f7fc fe51 	bl	800092c <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	@ 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	@ 0x32
 8003ca2:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <UART_SetConfig+0x4e4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4422      	add	r2, r4
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <siprintf>:
 8003cc8:	b40e      	push	{r1, r2, r3}
 8003cca:	b500      	push	{lr}
 8003ccc:	b09c      	sub	sp, #112	@ 0x70
 8003cce:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cd0:	9002      	str	r0, [sp, #8]
 8003cd2:	9006      	str	r0, [sp, #24]
 8003cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cd8:	4809      	ldr	r0, [pc, #36]	@ (8003d00 <siprintf+0x38>)
 8003cda:	9107      	str	r1, [sp, #28]
 8003cdc:	9104      	str	r1, [sp, #16]
 8003cde:	4909      	ldr	r1, [pc, #36]	@ (8003d04 <siprintf+0x3c>)
 8003ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce4:	9105      	str	r1, [sp, #20]
 8003ce6:	6800      	ldr	r0, [r0, #0]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	a902      	add	r1, sp, #8
 8003cec:	f000 f994 	bl	8004018 <_svfiprintf_r>
 8003cf0:	9b02      	ldr	r3, [sp, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	b01c      	add	sp, #112	@ 0x70
 8003cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cfc:	b003      	add	sp, #12
 8003cfe:	4770      	bx	lr
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	ffff0208 	.word	0xffff0208

08003d08 <memset>:
 8003d08:	4402      	add	r2, r0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <memset+0xa>
 8003d10:	4770      	bx	lr
 8003d12:	f803 1b01 	strb.w	r1, [r3], #1
 8003d16:	e7f9      	b.n	8003d0c <memset+0x4>

08003d18 <__errno>:
 8003d18:	4b01      	ldr	r3, [pc, #4]	@ (8003d20 <__errno+0x8>)
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2000000c 	.word	0x2000000c

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4d0d      	ldr	r5, [pc, #52]	@ (8003d5c <__libc_init_array+0x38>)
 8003d28:	4c0d      	ldr	r4, [pc, #52]	@ (8003d60 <__libc_init_array+0x3c>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	2600      	movs	r6, #0
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	4d0b      	ldr	r5, [pc, #44]	@ (8003d64 <__libc_init_array+0x40>)
 8003d36:	4c0c      	ldr	r4, [pc, #48]	@ (8003d68 <__libc_init_array+0x44>)
 8003d38:	f000 fc66 	bl	8004608 <_init>
 8003d3c:	1b64      	subs	r4, r4, r5
 8003d3e:	10a4      	asrs	r4, r4, #2
 8003d40:	2600      	movs	r6, #0
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08004698 	.word	0x08004698
 8003d60:	08004698 	.word	0x08004698
 8003d64:	08004698 	.word	0x08004698
 8003d68:	0800469c 	.word	0x0800469c

08003d6c <__retarget_lock_acquire_recursive>:
 8003d6c:	4770      	bx	lr

08003d6e <__retarget_lock_release_recursive>:
 8003d6e:	4770      	bx	lr

08003d70 <_free_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4605      	mov	r5, r0
 8003d74:	2900      	cmp	r1, #0
 8003d76:	d041      	beq.n	8003dfc <_free_r+0x8c>
 8003d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d7c:	1f0c      	subs	r4, r1, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfb8      	it	lt
 8003d82:	18e4      	addlt	r4, r4, r3
 8003d84:	f000 f8e0 	bl	8003f48 <__malloc_lock>
 8003d88:	4a1d      	ldr	r2, [pc, #116]	@ (8003e00 <_free_r+0x90>)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	b933      	cbnz	r3, 8003d9c <_free_r+0x2c>
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	6014      	str	r4, [r2, #0]
 8003d92:	4628      	mov	r0, r5
 8003d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d98:	f000 b8dc 	b.w	8003f54 <__malloc_unlock>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d908      	bls.n	8003db2 <_free_r+0x42>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	1821      	adds	r1, r4, r0
 8003da4:	428b      	cmp	r3, r1
 8003da6:	bf01      	itttt	eq
 8003da8:	6819      	ldreq	r1, [r3, #0]
 8003daa:	685b      	ldreq	r3, [r3, #4]
 8003dac:	1809      	addeq	r1, r1, r0
 8003dae:	6021      	streq	r1, [r4, #0]
 8003db0:	e7ed      	b.n	8003d8e <_free_r+0x1e>
 8003db2:	461a      	mov	r2, r3
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b10b      	cbz	r3, 8003dbc <_free_r+0x4c>
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d9fa      	bls.n	8003db2 <_free_r+0x42>
 8003dbc:	6811      	ldr	r1, [r2, #0]
 8003dbe:	1850      	adds	r0, r2, r1
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d10b      	bne.n	8003ddc <_free_r+0x6c>
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	1850      	adds	r0, r2, r1
 8003dca:	4283      	cmp	r3, r0
 8003dcc:	6011      	str	r1, [r2, #0]
 8003dce:	d1e0      	bne.n	8003d92 <_free_r+0x22>
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	6053      	str	r3, [r2, #4]
 8003dd6:	4408      	add	r0, r1
 8003dd8:	6010      	str	r0, [r2, #0]
 8003dda:	e7da      	b.n	8003d92 <_free_r+0x22>
 8003ddc:	d902      	bls.n	8003de4 <_free_r+0x74>
 8003dde:	230c      	movs	r3, #12
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	e7d6      	b.n	8003d92 <_free_r+0x22>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	1821      	adds	r1, r4, r0
 8003de8:	428b      	cmp	r3, r1
 8003dea:	bf04      	itt	eq
 8003dec:	6819      	ldreq	r1, [r3, #0]
 8003dee:	685b      	ldreq	r3, [r3, #4]
 8003df0:	6063      	str	r3, [r4, #4]
 8003df2:	bf04      	itt	eq
 8003df4:	1809      	addeq	r1, r1, r0
 8003df6:	6021      	streq	r1, [r4, #0]
 8003df8:	6054      	str	r4, [r2, #4]
 8003dfa:	e7ca      	b.n	8003d92 <_free_r+0x22>
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000260 	.word	0x20000260

08003e04 <sbrk_aligned>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4e0f      	ldr	r6, [pc, #60]	@ (8003e44 <sbrk_aligned+0x40>)
 8003e08:	460c      	mov	r4, r1
 8003e0a:	6831      	ldr	r1, [r6, #0]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	b911      	cbnz	r1, 8003e16 <sbrk_aligned+0x12>
 8003e10:	f000 fba6 	bl	8004560 <_sbrk_r>
 8003e14:	6030      	str	r0, [r6, #0]
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 fba1 	bl	8004560 <_sbrk_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d103      	bne.n	8003e2a <sbrk_aligned+0x26>
 8003e22:	f04f 34ff 	mov.w	r4, #4294967295
 8003e26:	4620      	mov	r0, r4
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
 8003e2a:	1cc4      	adds	r4, r0, #3
 8003e2c:	f024 0403 	bic.w	r4, r4, #3
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d0f8      	beq.n	8003e26 <sbrk_aligned+0x22>
 8003e34:	1a21      	subs	r1, r4, r0
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 fb92 	bl	8004560 <_sbrk_r>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d1f2      	bne.n	8003e26 <sbrk_aligned+0x22>
 8003e40:	e7ef      	b.n	8003e22 <sbrk_aligned+0x1e>
 8003e42:	bf00      	nop
 8003e44:	2000025c 	.word	0x2000025c

08003e48 <_malloc_r>:
 8003e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	1ccd      	adds	r5, r1, #3
 8003e4e:	f025 0503 	bic.w	r5, r5, #3
 8003e52:	3508      	adds	r5, #8
 8003e54:	2d0c      	cmp	r5, #12
 8003e56:	bf38      	it	cc
 8003e58:	250c      	movcc	r5, #12
 8003e5a:	2d00      	cmp	r5, #0
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	db01      	blt.n	8003e64 <_malloc_r+0x1c>
 8003e60:	42a9      	cmp	r1, r5
 8003e62:	d904      	bls.n	8003e6e <_malloc_r+0x26>
 8003e64:	230c      	movs	r3, #12
 8003e66:	6033      	str	r3, [r6, #0]
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f44 <_malloc_r+0xfc>
 8003e72:	f000 f869 	bl	8003f48 <__malloc_lock>
 8003e76:	f8d8 3000 	ldr.w	r3, [r8]
 8003e7a:	461c      	mov	r4, r3
 8003e7c:	bb44      	cbnz	r4, 8003ed0 <_malloc_r+0x88>
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff ffbf 	bl	8003e04 <sbrk_aligned>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	4604      	mov	r4, r0
 8003e8a:	d158      	bne.n	8003f3e <_malloc_r+0xf6>
 8003e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e90:	4627      	mov	r7, r4
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d143      	bne.n	8003f1e <_malloc_r+0xd6>
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	d04b      	beq.n	8003f32 <_malloc_r+0xea>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	eb04 0903 	add.w	r9, r4, r3
 8003ea4:	f000 fb5c 	bl	8004560 <_sbrk_r>
 8003ea8:	4581      	cmp	r9, r0
 8003eaa:	d142      	bne.n	8003f32 <_malloc_r+0xea>
 8003eac:	6821      	ldr	r1, [r4, #0]
 8003eae:	1a6d      	subs	r5, r5, r1
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f7ff ffa6 	bl	8003e04 <sbrk_aligned>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d03a      	beq.n	8003f32 <_malloc_r+0xea>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	442b      	add	r3, r5
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	bb62      	cbnz	r2, 8003f24 <_malloc_r+0xdc>
 8003eca:	f8c8 7000 	str.w	r7, [r8]
 8003ece:	e00f      	b.n	8003ef0 <_malloc_r+0xa8>
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	1b52      	subs	r2, r2, r5
 8003ed4:	d420      	bmi.n	8003f18 <_malloc_r+0xd0>
 8003ed6:	2a0b      	cmp	r2, #11
 8003ed8:	d917      	bls.n	8003f0a <_malloc_r+0xc2>
 8003eda:	1961      	adds	r1, r4, r5
 8003edc:	42a3      	cmp	r3, r4
 8003ede:	6025      	str	r5, [r4, #0]
 8003ee0:	bf18      	it	ne
 8003ee2:	6059      	strne	r1, [r3, #4]
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	bf08      	it	eq
 8003ee8:	f8c8 1000 	streq.w	r1, [r8]
 8003eec:	5162      	str	r2, [r4, r5]
 8003eee:	604b      	str	r3, [r1, #4]
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f000 f82f 	bl	8003f54 <__malloc_unlock>
 8003ef6:	f104 000b 	add.w	r0, r4, #11
 8003efa:	1d23      	adds	r3, r4, #4
 8003efc:	f020 0007 	bic.w	r0, r0, #7
 8003f00:	1ac2      	subs	r2, r0, r3
 8003f02:	bf1c      	itt	ne
 8003f04:	1a1b      	subne	r3, r3, r0
 8003f06:	50a3      	strne	r3, [r4, r2]
 8003f08:	e7af      	b.n	8003e6a <_malloc_r+0x22>
 8003f0a:	6862      	ldr	r2, [r4, #4]
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	bf0c      	ite	eq
 8003f10:	f8c8 2000 	streq.w	r2, [r8]
 8003f14:	605a      	strne	r2, [r3, #4]
 8003f16:	e7eb      	b.n	8003ef0 <_malloc_r+0xa8>
 8003f18:	4623      	mov	r3, r4
 8003f1a:	6864      	ldr	r4, [r4, #4]
 8003f1c:	e7ae      	b.n	8003e7c <_malloc_r+0x34>
 8003f1e:	463c      	mov	r4, r7
 8003f20:	687f      	ldr	r7, [r7, #4]
 8003f22:	e7b6      	b.n	8003e92 <_malloc_r+0x4a>
 8003f24:	461a      	mov	r2, r3
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d1fb      	bne.n	8003f24 <_malloc_r+0xdc>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6053      	str	r3, [r2, #4]
 8003f30:	e7de      	b.n	8003ef0 <_malloc_r+0xa8>
 8003f32:	230c      	movs	r3, #12
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	4630      	mov	r0, r6
 8003f38:	f000 f80c 	bl	8003f54 <__malloc_unlock>
 8003f3c:	e794      	b.n	8003e68 <_malloc_r+0x20>
 8003f3e:	6005      	str	r5, [r0, #0]
 8003f40:	e7d6      	b.n	8003ef0 <_malloc_r+0xa8>
 8003f42:	bf00      	nop
 8003f44:	20000260 	.word	0x20000260

08003f48 <__malloc_lock>:
 8003f48:	4801      	ldr	r0, [pc, #4]	@ (8003f50 <__malloc_lock+0x8>)
 8003f4a:	f7ff bf0f 	b.w	8003d6c <__retarget_lock_acquire_recursive>
 8003f4e:	bf00      	nop
 8003f50:	20000258 	.word	0x20000258

08003f54 <__malloc_unlock>:
 8003f54:	4801      	ldr	r0, [pc, #4]	@ (8003f5c <__malloc_unlock+0x8>)
 8003f56:	f7ff bf0a 	b.w	8003d6e <__retarget_lock_release_recursive>
 8003f5a:	bf00      	nop
 8003f5c:	20000258 	.word	0x20000258

08003f60 <__ssputs_r>:
 8003f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	688e      	ldr	r6, [r1, #8]
 8003f66:	461f      	mov	r7, r3
 8003f68:	42be      	cmp	r6, r7
 8003f6a:	680b      	ldr	r3, [r1, #0]
 8003f6c:	4682      	mov	sl, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	4690      	mov	r8, r2
 8003f72:	d82d      	bhi.n	8003fd0 <__ssputs_r+0x70>
 8003f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f7c:	d026      	beq.n	8003fcc <__ssputs_r+0x6c>
 8003f7e:	6965      	ldr	r5, [r4, #20]
 8003f80:	6909      	ldr	r1, [r1, #16]
 8003f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f86:	eba3 0901 	sub.w	r9, r3, r1
 8003f8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f8e:	1c7b      	adds	r3, r7, #1
 8003f90:	444b      	add	r3, r9
 8003f92:	106d      	asrs	r5, r5, #1
 8003f94:	429d      	cmp	r5, r3
 8003f96:	bf38      	it	cc
 8003f98:	461d      	movcc	r5, r3
 8003f9a:	0553      	lsls	r3, r2, #21
 8003f9c:	d527      	bpl.n	8003fee <__ssputs_r+0x8e>
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7ff ff52 	bl	8003e48 <_malloc_r>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	b360      	cbz	r0, 8004002 <__ssputs_r+0xa2>
 8003fa8:	6921      	ldr	r1, [r4, #16]
 8003faa:	464a      	mov	r2, r9
 8003fac:	f000 fae8 	bl	8004580 <memcpy>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	6126      	str	r6, [r4, #16]
 8003fbe:	6165      	str	r5, [r4, #20]
 8003fc0:	444e      	add	r6, r9
 8003fc2:	eba5 0509 	sub.w	r5, r5, r9
 8003fc6:	6026      	str	r6, [r4, #0]
 8003fc8:	60a5      	str	r5, [r4, #8]
 8003fca:	463e      	mov	r6, r7
 8003fcc:	42be      	cmp	r6, r7
 8003fce:	d900      	bls.n	8003fd2 <__ssputs_r+0x72>
 8003fd0:	463e      	mov	r6, r7
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	f000 faa8 	bl	800452c <memmove>
 8003fdc:	68a3      	ldr	r3, [r4, #8]
 8003fde:	1b9b      	subs	r3, r3, r6
 8003fe0:	60a3      	str	r3, [r4, #8]
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	4433      	add	r3, r6
 8003fe6:	6023      	str	r3, [r4, #0]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fee:	462a      	mov	r2, r5
 8003ff0:	f000 fad4 	bl	800459c <_realloc_r>
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d1e0      	bne.n	8003fbc <__ssputs_r+0x5c>
 8003ffa:	6921      	ldr	r1, [r4, #16]
 8003ffc:	4650      	mov	r0, sl
 8003ffe:	f7ff feb7 	bl	8003d70 <_free_r>
 8004002:	230c      	movs	r3, #12
 8004004:	f8ca 3000 	str.w	r3, [sl]
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e7e9      	b.n	8003fea <__ssputs_r+0x8a>
	...

08004018 <_svfiprintf_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	4698      	mov	r8, r3
 800401e:	898b      	ldrh	r3, [r1, #12]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	b09d      	sub	sp, #116	@ 0x74
 8004024:	4607      	mov	r7, r0
 8004026:	460d      	mov	r5, r1
 8004028:	4614      	mov	r4, r2
 800402a:	d510      	bpl.n	800404e <_svfiprintf_r+0x36>
 800402c:	690b      	ldr	r3, [r1, #16]
 800402e:	b973      	cbnz	r3, 800404e <_svfiprintf_r+0x36>
 8004030:	2140      	movs	r1, #64	@ 0x40
 8004032:	f7ff ff09 	bl	8003e48 <_malloc_r>
 8004036:	6028      	str	r0, [r5, #0]
 8004038:	6128      	str	r0, [r5, #16]
 800403a:	b930      	cbnz	r0, 800404a <_svfiprintf_r+0x32>
 800403c:	230c      	movs	r3, #12
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b01d      	add	sp, #116	@ 0x74
 8004046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404a:	2340      	movs	r3, #64	@ 0x40
 800404c:	616b      	str	r3, [r5, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	9309      	str	r3, [sp, #36]	@ 0x24
 8004052:	2320      	movs	r3, #32
 8004054:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004058:	f8cd 800c 	str.w	r8, [sp, #12]
 800405c:	2330      	movs	r3, #48	@ 0x30
 800405e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041fc <_svfiprintf_r+0x1e4>
 8004062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004066:	f04f 0901 	mov.w	r9, #1
 800406a:	4623      	mov	r3, r4
 800406c:	469a      	mov	sl, r3
 800406e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004072:	b10a      	cbz	r2, 8004078 <_svfiprintf_r+0x60>
 8004074:	2a25      	cmp	r2, #37	@ 0x25
 8004076:	d1f9      	bne.n	800406c <_svfiprintf_r+0x54>
 8004078:	ebba 0b04 	subs.w	fp, sl, r4
 800407c:	d00b      	beq.n	8004096 <_svfiprintf_r+0x7e>
 800407e:	465b      	mov	r3, fp
 8004080:	4622      	mov	r2, r4
 8004082:	4629      	mov	r1, r5
 8004084:	4638      	mov	r0, r7
 8004086:	f7ff ff6b 	bl	8003f60 <__ssputs_r>
 800408a:	3001      	adds	r0, #1
 800408c:	f000 80a7 	beq.w	80041de <_svfiprintf_r+0x1c6>
 8004090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004092:	445a      	add	r2, fp
 8004094:	9209      	str	r2, [sp, #36]	@ 0x24
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 809f 	beq.w	80041de <_svfiprintf_r+0x1c6>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040aa:	f10a 0a01 	add.w	sl, sl, #1
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	9307      	str	r3, [sp, #28]
 80040b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80040b8:	4654      	mov	r4, sl
 80040ba:	2205      	movs	r2, #5
 80040bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c0:	484e      	ldr	r0, [pc, #312]	@ (80041fc <_svfiprintf_r+0x1e4>)
 80040c2:	f7fc f8ad 	bl	8000220 <memchr>
 80040c6:	9a04      	ldr	r2, [sp, #16]
 80040c8:	b9d8      	cbnz	r0, 8004102 <_svfiprintf_r+0xea>
 80040ca:	06d0      	lsls	r0, r2, #27
 80040cc:	bf44      	itt	mi
 80040ce:	2320      	movmi	r3, #32
 80040d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d4:	0711      	lsls	r1, r2, #28
 80040d6:	bf44      	itt	mi
 80040d8:	232b      	movmi	r3, #43	@ 0x2b
 80040da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040de:	f89a 3000 	ldrb.w	r3, [sl]
 80040e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e4:	d015      	beq.n	8004112 <_svfiprintf_r+0xfa>
 80040e6:	9a07      	ldr	r2, [sp, #28]
 80040e8:	4654      	mov	r4, sl
 80040ea:	2000      	movs	r0, #0
 80040ec:	f04f 0c0a 	mov.w	ip, #10
 80040f0:	4621      	mov	r1, r4
 80040f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f6:	3b30      	subs	r3, #48	@ 0x30
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d94b      	bls.n	8004194 <_svfiprintf_r+0x17c>
 80040fc:	b1b0      	cbz	r0, 800412c <_svfiprintf_r+0x114>
 80040fe:	9207      	str	r2, [sp, #28]
 8004100:	e014      	b.n	800412c <_svfiprintf_r+0x114>
 8004102:	eba0 0308 	sub.w	r3, r0, r8
 8004106:	fa09 f303 	lsl.w	r3, r9, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	46a2      	mov	sl, r4
 8004110:	e7d2      	b.n	80040b8 <_svfiprintf_r+0xa0>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	1d19      	adds	r1, r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9103      	str	r1, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbb      	ittet	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	f042 0202 	orrlt.w	r2, r2, #2
 8004124:	9307      	strge	r3, [sp, #28]
 8004126:	9307      	strlt	r3, [sp, #28]
 8004128:	bfb8      	it	lt
 800412a:	9204      	strlt	r2, [sp, #16]
 800412c:	7823      	ldrb	r3, [r4, #0]
 800412e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004130:	d10a      	bne.n	8004148 <_svfiprintf_r+0x130>
 8004132:	7863      	ldrb	r3, [r4, #1]
 8004134:	2b2a      	cmp	r3, #42	@ 0x2a
 8004136:	d132      	bne.n	800419e <_svfiprintf_r+0x186>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	9203      	str	r2, [sp, #12]
 8004140:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004144:	3402      	adds	r4, #2
 8004146:	9305      	str	r3, [sp, #20]
 8004148:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800420c <_svfiprintf_r+0x1f4>
 800414c:	7821      	ldrb	r1, [r4, #0]
 800414e:	2203      	movs	r2, #3
 8004150:	4650      	mov	r0, sl
 8004152:	f7fc f865 	bl	8000220 <memchr>
 8004156:	b138      	cbz	r0, 8004168 <_svfiprintf_r+0x150>
 8004158:	9b04      	ldr	r3, [sp, #16]
 800415a:	eba0 000a 	sub.w	r0, r0, sl
 800415e:	2240      	movs	r2, #64	@ 0x40
 8004160:	4082      	lsls	r2, r0
 8004162:	4313      	orrs	r3, r2
 8004164:	3401      	adds	r4, #1
 8004166:	9304      	str	r3, [sp, #16]
 8004168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800416c:	4824      	ldr	r0, [pc, #144]	@ (8004200 <_svfiprintf_r+0x1e8>)
 800416e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004172:	2206      	movs	r2, #6
 8004174:	f7fc f854 	bl	8000220 <memchr>
 8004178:	2800      	cmp	r0, #0
 800417a:	d036      	beq.n	80041ea <_svfiprintf_r+0x1d2>
 800417c:	4b21      	ldr	r3, [pc, #132]	@ (8004204 <_svfiprintf_r+0x1ec>)
 800417e:	bb1b      	cbnz	r3, 80041c8 <_svfiprintf_r+0x1b0>
 8004180:	9b03      	ldr	r3, [sp, #12]
 8004182:	3307      	adds	r3, #7
 8004184:	f023 0307 	bic.w	r3, r3, #7
 8004188:	3308      	adds	r3, #8
 800418a:	9303      	str	r3, [sp, #12]
 800418c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800418e:	4433      	add	r3, r6
 8004190:	9309      	str	r3, [sp, #36]	@ 0x24
 8004192:	e76a      	b.n	800406a <_svfiprintf_r+0x52>
 8004194:	fb0c 3202 	mla	r2, ip, r2, r3
 8004198:	460c      	mov	r4, r1
 800419a:	2001      	movs	r0, #1
 800419c:	e7a8      	b.n	80040f0 <_svfiprintf_r+0xd8>
 800419e:	2300      	movs	r3, #0
 80041a0:	3401      	adds	r4, #1
 80041a2:	9305      	str	r3, [sp, #20]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f04f 0c0a 	mov.w	ip, #10
 80041aa:	4620      	mov	r0, r4
 80041ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b0:	3a30      	subs	r2, #48	@ 0x30
 80041b2:	2a09      	cmp	r2, #9
 80041b4:	d903      	bls.n	80041be <_svfiprintf_r+0x1a6>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0c6      	beq.n	8004148 <_svfiprintf_r+0x130>
 80041ba:	9105      	str	r1, [sp, #20]
 80041bc:	e7c4      	b.n	8004148 <_svfiprintf_r+0x130>
 80041be:	fb0c 2101 	mla	r1, ip, r1, r2
 80041c2:	4604      	mov	r4, r0
 80041c4:	2301      	movs	r3, #1
 80041c6:	e7f0      	b.n	80041aa <_svfiprintf_r+0x192>
 80041c8:	ab03      	add	r3, sp, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	462a      	mov	r2, r5
 80041ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <_svfiprintf_r+0x1f0>)
 80041d0:	a904      	add	r1, sp, #16
 80041d2:	4638      	mov	r0, r7
 80041d4:	f3af 8000 	nop.w
 80041d8:	1c42      	adds	r2, r0, #1
 80041da:	4606      	mov	r6, r0
 80041dc:	d1d6      	bne.n	800418c <_svfiprintf_r+0x174>
 80041de:	89ab      	ldrh	r3, [r5, #12]
 80041e0:	065b      	lsls	r3, r3, #25
 80041e2:	f53f af2d 	bmi.w	8004040 <_svfiprintf_r+0x28>
 80041e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e8:	e72c      	b.n	8004044 <_svfiprintf_r+0x2c>
 80041ea:	ab03      	add	r3, sp, #12
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	462a      	mov	r2, r5
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <_svfiprintf_r+0x1f0>)
 80041f2:	a904      	add	r1, sp, #16
 80041f4:	4638      	mov	r0, r7
 80041f6:	f000 f879 	bl	80042ec <_printf_i>
 80041fa:	e7ed      	b.n	80041d8 <_svfiprintf_r+0x1c0>
 80041fc:	0800465c 	.word	0x0800465c
 8004200:	08004666 	.word	0x08004666
 8004204:	00000000 	.word	0x00000000
 8004208:	08003f61 	.word	0x08003f61
 800420c:	08004662 	.word	0x08004662

08004210 <_printf_common>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	4616      	mov	r6, r2
 8004216:	4698      	mov	r8, r3
 8004218:	688a      	ldr	r2, [r1, #8]
 800421a:	690b      	ldr	r3, [r1, #16]
 800421c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004220:	4293      	cmp	r3, r2
 8004222:	bfb8      	it	lt
 8004224:	4613      	movlt	r3, r2
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800422c:	4607      	mov	r7, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b10a      	cbz	r2, 8004236 <_printf_common+0x26>
 8004232:	3301      	adds	r3, #1
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	0699      	lsls	r1, r3, #26
 800423a:	bf42      	ittt	mi
 800423c:	6833      	ldrmi	r3, [r6, #0]
 800423e:	3302      	addmi	r3, #2
 8004240:	6033      	strmi	r3, [r6, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d106      	bne.n	8004258 <_printf_common+0x48>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6832      	ldr	r2, [r6, #0]
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc26      	bgt.n	80042a6 <_printf_common+0x96>
 8004258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	3b00      	subs	r3, #0
 8004260:	bf18      	it	ne
 8004262:	2301      	movne	r3, #1
 8004264:	0692      	lsls	r2, r2, #26
 8004266:	d42b      	bmi.n	80042c0 <_printf_common+0xb0>
 8004268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800426c:	4641      	mov	r1, r8
 800426e:	4638      	mov	r0, r7
 8004270:	47c8      	blx	r9
 8004272:	3001      	adds	r0, #1
 8004274:	d01e      	beq.n	80042b4 <_printf_common+0xa4>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	6922      	ldr	r2, [r4, #16]
 800427a:	f003 0306 	and.w	r3, r3, #6
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf02      	ittt	eq
 8004282:	68e5      	ldreq	r5, [r4, #12]
 8004284:	6833      	ldreq	r3, [r6, #0]
 8004286:	1aed      	subeq	r5, r5, r3
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	bf0c      	ite	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	2500      	movne	r5, #0
 8004292:	4293      	cmp	r3, r2
 8004294:	bfc4      	itt	gt
 8004296:	1a9b      	subgt	r3, r3, r2
 8004298:	18ed      	addgt	r5, r5, r3
 800429a:	2600      	movs	r6, #0
 800429c:	341a      	adds	r4, #26
 800429e:	42b5      	cmp	r5, r6
 80042a0:	d11a      	bne.n	80042d8 <_printf_common+0xc8>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e008      	b.n	80042b8 <_printf_common+0xa8>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4641      	mov	r1, r8
 80042ac:	4638      	mov	r0, r7
 80042ae:	47c8      	blx	r9
 80042b0:	3001      	adds	r0, #1
 80042b2:	d103      	bne.n	80042bc <_printf_common+0xac>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	3501      	adds	r5, #1
 80042be:	e7c6      	b.n	800424e <_printf_common+0x3e>
 80042c0:	18e1      	adds	r1, r4, r3
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	2030      	movs	r0, #48	@ 0x30
 80042c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ca:	4422      	add	r2, r4
 80042cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042d4:	3302      	adds	r3, #2
 80042d6:	e7c7      	b.n	8004268 <_printf_common+0x58>
 80042d8:	2301      	movs	r3, #1
 80042da:	4622      	mov	r2, r4
 80042dc:	4641      	mov	r1, r8
 80042de:	4638      	mov	r0, r7
 80042e0:	47c8      	blx	r9
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0e6      	beq.n	80042b4 <_printf_common+0xa4>
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7d9      	b.n	800429e <_printf_common+0x8e>
	...

080042ec <_printf_i>:
 80042ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	7e0f      	ldrb	r7, [r1, #24]
 80042f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f4:	2f78      	cmp	r7, #120	@ 0x78
 80042f6:	4691      	mov	r9, r2
 80042f8:	4680      	mov	r8, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	469a      	mov	sl, r3
 80042fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004302:	d807      	bhi.n	8004314 <_printf_i+0x28>
 8004304:	2f62      	cmp	r7, #98	@ 0x62
 8004306:	d80a      	bhi.n	800431e <_printf_i+0x32>
 8004308:	2f00      	cmp	r7, #0
 800430a:	f000 80d2 	beq.w	80044b2 <_printf_i+0x1c6>
 800430e:	2f58      	cmp	r7, #88	@ 0x58
 8004310:	f000 80b9 	beq.w	8004486 <_printf_i+0x19a>
 8004314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800431c:	e03a      	b.n	8004394 <_printf_i+0xa8>
 800431e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004322:	2b15      	cmp	r3, #21
 8004324:	d8f6      	bhi.n	8004314 <_printf_i+0x28>
 8004326:	a101      	add	r1, pc, #4	@ (adr r1, 800432c <_printf_i+0x40>)
 8004328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800432c:	08004385 	.word	0x08004385
 8004330:	08004399 	.word	0x08004399
 8004334:	08004315 	.word	0x08004315
 8004338:	08004315 	.word	0x08004315
 800433c:	08004315 	.word	0x08004315
 8004340:	08004315 	.word	0x08004315
 8004344:	08004399 	.word	0x08004399
 8004348:	08004315 	.word	0x08004315
 800434c:	08004315 	.word	0x08004315
 8004350:	08004315 	.word	0x08004315
 8004354:	08004315 	.word	0x08004315
 8004358:	08004499 	.word	0x08004499
 800435c:	080043c3 	.word	0x080043c3
 8004360:	08004453 	.word	0x08004453
 8004364:	08004315 	.word	0x08004315
 8004368:	08004315 	.word	0x08004315
 800436c:	080044bb 	.word	0x080044bb
 8004370:	08004315 	.word	0x08004315
 8004374:	080043c3 	.word	0x080043c3
 8004378:	08004315 	.word	0x08004315
 800437c:	08004315 	.word	0x08004315
 8004380:	0800445b 	.word	0x0800445b
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6032      	str	r2, [r6, #0]
 800438c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e09d      	b.n	80044d4 <_printf_i+0x1e8>
 8004398:	6833      	ldr	r3, [r6, #0]
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	1d19      	adds	r1, r3, #4
 800439e:	6031      	str	r1, [r6, #0]
 80043a0:	0606      	lsls	r6, r0, #24
 80043a2:	d501      	bpl.n	80043a8 <_printf_i+0xbc>
 80043a4:	681d      	ldr	r5, [r3, #0]
 80043a6:	e003      	b.n	80043b0 <_printf_i+0xc4>
 80043a8:	0645      	lsls	r5, r0, #25
 80043aa:	d5fb      	bpl.n	80043a4 <_printf_i+0xb8>
 80043ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	da03      	bge.n	80043bc <_printf_i+0xd0>
 80043b4:	232d      	movs	r3, #45	@ 0x2d
 80043b6:	426d      	negs	r5, r5
 80043b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043bc:	4859      	ldr	r0, [pc, #356]	@ (8004524 <_printf_i+0x238>)
 80043be:	230a      	movs	r3, #10
 80043c0:	e011      	b.n	80043e6 <_printf_i+0xfa>
 80043c2:	6821      	ldr	r1, [r4, #0]
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	0608      	lsls	r0, r1, #24
 80043c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80043cc:	d402      	bmi.n	80043d4 <_printf_i+0xe8>
 80043ce:	0649      	lsls	r1, r1, #25
 80043d0:	bf48      	it	mi
 80043d2:	b2ad      	uxthmi	r5, r5
 80043d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043d6:	4853      	ldr	r0, [pc, #332]	@ (8004524 <_printf_i+0x238>)
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	bf14      	ite	ne
 80043dc:	230a      	movne	r3, #10
 80043de:	2308      	moveq	r3, #8
 80043e0:	2100      	movs	r1, #0
 80043e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043e6:	6866      	ldr	r6, [r4, #4]
 80043e8:	60a6      	str	r6, [r4, #8]
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	bfa2      	ittt	ge
 80043ee:	6821      	ldrge	r1, [r4, #0]
 80043f0:	f021 0104 	bicge.w	r1, r1, #4
 80043f4:	6021      	strge	r1, [r4, #0]
 80043f6:	b90d      	cbnz	r5, 80043fc <_printf_i+0x110>
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	d04b      	beq.n	8004494 <_printf_i+0x1a8>
 80043fc:	4616      	mov	r6, r2
 80043fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004402:	fb03 5711 	mls	r7, r3, r1, r5
 8004406:	5dc7      	ldrb	r7, [r0, r7]
 8004408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800440c:	462f      	mov	r7, r5
 800440e:	42bb      	cmp	r3, r7
 8004410:	460d      	mov	r5, r1
 8004412:	d9f4      	bls.n	80043fe <_printf_i+0x112>
 8004414:	2b08      	cmp	r3, #8
 8004416:	d10b      	bne.n	8004430 <_printf_i+0x144>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	07df      	lsls	r7, r3, #31
 800441c:	d508      	bpl.n	8004430 <_printf_i+0x144>
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	6861      	ldr	r1, [r4, #4]
 8004422:	4299      	cmp	r1, r3
 8004424:	bfde      	ittt	le
 8004426:	2330      	movle	r3, #48	@ 0x30
 8004428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800442c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004430:	1b92      	subs	r2, r2, r6
 8004432:	6122      	str	r2, [r4, #16]
 8004434:	f8cd a000 	str.w	sl, [sp]
 8004438:	464b      	mov	r3, r9
 800443a:	aa03      	add	r2, sp, #12
 800443c:	4621      	mov	r1, r4
 800443e:	4640      	mov	r0, r8
 8004440:	f7ff fee6 	bl	8004210 <_printf_common>
 8004444:	3001      	adds	r0, #1
 8004446:	d14a      	bne.n	80044de <_printf_i+0x1f2>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	b004      	add	sp, #16
 800444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f043 0320 	orr.w	r3, r3, #32
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	4833      	ldr	r0, [pc, #204]	@ (8004528 <_printf_i+0x23c>)
 800445c:	2778      	movs	r7, #120	@ 0x78
 800445e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	6831      	ldr	r1, [r6, #0]
 8004466:	061f      	lsls	r7, r3, #24
 8004468:	f851 5b04 	ldr.w	r5, [r1], #4
 800446c:	d402      	bmi.n	8004474 <_printf_i+0x188>
 800446e:	065f      	lsls	r7, r3, #25
 8004470:	bf48      	it	mi
 8004472:	b2ad      	uxthmi	r5, r5
 8004474:	6031      	str	r1, [r6, #0]
 8004476:	07d9      	lsls	r1, r3, #31
 8004478:	bf44      	itt	mi
 800447a:	f043 0320 	orrmi.w	r3, r3, #32
 800447e:	6023      	strmi	r3, [r4, #0]
 8004480:	b11d      	cbz	r5, 800448a <_printf_i+0x19e>
 8004482:	2310      	movs	r3, #16
 8004484:	e7ac      	b.n	80043e0 <_printf_i+0xf4>
 8004486:	4827      	ldr	r0, [pc, #156]	@ (8004524 <_printf_i+0x238>)
 8004488:	e7e9      	b.n	800445e <_printf_i+0x172>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	f023 0320 	bic.w	r3, r3, #32
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	e7f6      	b.n	8004482 <_printf_i+0x196>
 8004494:	4616      	mov	r6, r2
 8004496:	e7bd      	b.n	8004414 <_printf_i+0x128>
 8004498:	6833      	ldr	r3, [r6, #0]
 800449a:	6825      	ldr	r5, [r4, #0]
 800449c:	6961      	ldr	r1, [r4, #20]
 800449e:	1d18      	adds	r0, r3, #4
 80044a0:	6030      	str	r0, [r6, #0]
 80044a2:	062e      	lsls	r6, r5, #24
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	d501      	bpl.n	80044ac <_printf_i+0x1c0>
 80044a8:	6019      	str	r1, [r3, #0]
 80044aa:	e002      	b.n	80044b2 <_printf_i+0x1c6>
 80044ac:	0668      	lsls	r0, r5, #25
 80044ae:	d5fb      	bpl.n	80044a8 <_printf_i+0x1bc>
 80044b0:	8019      	strh	r1, [r3, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	6123      	str	r3, [r4, #16]
 80044b6:	4616      	mov	r6, r2
 80044b8:	e7bc      	b.n	8004434 <_printf_i+0x148>
 80044ba:	6833      	ldr	r3, [r6, #0]
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	6032      	str	r2, [r6, #0]
 80044c0:	681e      	ldr	r6, [r3, #0]
 80044c2:	6862      	ldr	r2, [r4, #4]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4630      	mov	r0, r6
 80044c8:	f7fb feaa 	bl	8000220 <memchr>
 80044cc:	b108      	cbz	r0, 80044d2 <_printf_i+0x1e6>
 80044ce:	1b80      	subs	r0, r0, r6
 80044d0:	6060      	str	r0, [r4, #4]
 80044d2:	6863      	ldr	r3, [r4, #4]
 80044d4:	6123      	str	r3, [r4, #16]
 80044d6:	2300      	movs	r3, #0
 80044d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044dc:	e7aa      	b.n	8004434 <_printf_i+0x148>
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	4632      	mov	r2, r6
 80044e2:	4649      	mov	r1, r9
 80044e4:	4640      	mov	r0, r8
 80044e6:	47d0      	blx	sl
 80044e8:	3001      	adds	r0, #1
 80044ea:	d0ad      	beq.n	8004448 <_printf_i+0x15c>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	079b      	lsls	r3, r3, #30
 80044f0:	d413      	bmi.n	800451a <_printf_i+0x22e>
 80044f2:	68e0      	ldr	r0, [r4, #12]
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	4298      	cmp	r0, r3
 80044f8:	bfb8      	it	lt
 80044fa:	4618      	movlt	r0, r3
 80044fc:	e7a6      	b.n	800444c <_printf_i+0x160>
 80044fe:	2301      	movs	r3, #1
 8004500:	4632      	mov	r2, r6
 8004502:	4649      	mov	r1, r9
 8004504:	4640      	mov	r0, r8
 8004506:	47d0      	blx	sl
 8004508:	3001      	adds	r0, #1
 800450a:	d09d      	beq.n	8004448 <_printf_i+0x15c>
 800450c:	3501      	adds	r5, #1
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	9903      	ldr	r1, [sp, #12]
 8004512:	1a5b      	subs	r3, r3, r1
 8004514:	42ab      	cmp	r3, r5
 8004516:	dcf2      	bgt.n	80044fe <_printf_i+0x212>
 8004518:	e7eb      	b.n	80044f2 <_printf_i+0x206>
 800451a:	2500      	movs	r5, #0
 800451c:	f104 0619 	add.w	r6, r4, #25
 8004520:	e7f5      	b.n	800450e <_printf_i+0x222>
 8004522:	bf00      	nop
 8004524:	0800466d 	.word	0x0800466d
 8004528:	0800467e 	.word	0x0800467e

0800452c <memmove>:
 800452c:	4288      	cmp	r0, r1
 800452e:	b510      	push	{r4, lr}
 8004530:	eb01 0402 	add.w	r4, r1, r2
 8004534:	d902      	bls.n	800453c <memmove+0x10>
 8004536:	4284      	cmp	r4, r0
 8004538:	4623      	mov	r3, r4
 800453a:	d807      	bhi.n	800454c <memmove+0x20>
 800453c:	1e43      	subs	r3, r0, #1
 800453e:	42a1      	cmp	r1, r4
 8004540:	d008      	beq.n	8004554 <memmove+0x28>
 8004542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800454a:	e7f8      	b.n	800453e <memmove+0x12>
 800454c:	4402      	add	r2, r0
 800454e:	4601      	mov	r1, r0
 8004550:	428a      	cmp	r2, r1
 8004552:	d100      	bne.n	8004556 <memmove+0x2a>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800455a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800455e:	e7f7      	b.n	8004550 <memmove+0x24>

08004560 <_sbrk_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d06      	ldr	r5, [pc, #24]	@ (800457c <_sbrk_r+0x1c>)
 8004564:	2300      	movs	r3, #0
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fc fe22 	bl	80011b4 <_sbrk>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_sbrk_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_sbrk_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000254 	.word	0x20000254

08004580 <memcpy>:
 8004580:	440a      	add	r2, r1
 8004582:	4291      	cmp	r1, r2
 8004584:	f100 33ff 	add.w	r3, r0, #4294967295
 8004588:	d100      	bne.n	800458c <memcpy+0xc>
 800458a:	4770      	bx	lr
 800458c:	b510      	push	{r4, lr}
 800458e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004596:	4291      	cmp	r1, r2
 8004598:	d1f9      	bne.n	800458e <memcpy+0xe>
 800459a:	bd10      	pop	{r4, pc}

0800459c <_realloc_r>:
 800459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a0:	4680      	mov	r8, r0
 80045a2:	4615      	mov	r5, r2
 80045a4:	460c      	mov	r4, r1
 80045a6:	b921      	cbnz	r1, 80045b2 <_realloc_r+0x16>
 80045a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4611      	mov	r1, r2
 80045ae:	f7ff bc4b 	b.w	8003e48 <_malloc_r>
 80045b2:	b92a      	cbnz	r2, 80045c0 <_realloc_r+0x24>
 80045b4:	f7ff fbdc 	bl	8003d70 <_free_r>
 80045b8:	2400      	movs	r4, #0
 80045ba:	4620      	mov	r0, r4
 80045bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c0:	f000 f81a 	bl	80045f8 <_malloc_usable_size_r>
 80045c4:	4285      	cmp	r5, r0
 80045c6:	4606      	mov	r6, r0
 80045c8:	d802      	bhi.n	80045d0 <_realloc_r+0x34>
 80045ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045ce:	d8f4      	bhi.n	80045ba <_realloc_r+0x1e>
 80045d0:	4629      	mov	r1, r5
 80045d2:	4640      	mov	r0, r8
 80045d4:	f7ff fc38 	bl	8003e48 <_malloc_r>
 80045d8:	4607      	mov	r7, r0
 80045da:	2800      	cmp	r0, #0
 80045dc:	d0ec      	beq.n	80045b8 <_realloc_r+0x1c>
 80045de:	42b5      	cmp	r5, r6
 80045e0:	462a      	mov	r2, r5
 80045e2:	4621      	mov	r1, r4
 80045e4:	bf28      	it	cs
 80045e6:	4632      	movcs	r2, r6
 80045e8:	f7ff ffca 	bl	8004580 <memcpy>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4640      	mov	r0, r8
 80045f0:	f7ff fbbe 	bl	8003d70 <_free_r>
 80045f4:	463c      	mov	r4, r7
 80045f6:	e7e0      	b.n	80045ba <_realloc_r+0x1e>

080045f8 <_malloc_usable_size_r>:
 80045f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fc:	1f18      	subs	r0, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bfbc      	itt	lt
 8004602:	580b      	ldrlt	r3, [r1, r0]
 8004604:	18c0      	addlt	r0, r0, r3
 8004606:	4770      	bx	lr

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
